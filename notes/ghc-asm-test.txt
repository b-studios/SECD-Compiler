some programs for the ghc cpu

******************************************************************

; small test program
"adv":												;	0
inc c												;	0
mov e, c											;	1
"incr:"												;	2
inc [c]												;	2
mov f, [c]											;	3
jeq "adv", [c], 255									;	4
jeq "incr", 0, 0	; alternative: mov PC, "incr"	;	5


*****************************************************************

; manhattan distance between ghost and \-man #1
int 3						; get ghost id							0
int 5						; get ghost coords (a, b)				1
mov g, a					; ghost(x) -> g							2
mov h, b					; ghost(y) -> h							3
int 1						; get lambdaman coords (a, b)			4
mov e, a					; man(x) -> e							5
mov f, b					; man(y) -> f							6
int 8						; debug									7
sub a, g					; man(x) - ghost(x) => a	x distance	8
sub b, h					; man(y) - ghost(y) => b	y distance	9
mov c, 255					; c = 255								10
jgt "manGtGhostX", e, g		; if man(x) > ghost(x), test y			11
sub c, a					; 255-a -> c  make value positive		12
mov a, c					; a <-c 								13
"manGtGhostX":				LABEL! DELETE ME!						14
jgt "manGtGhostY", f, h		; if man(y) > ghost(y), move on			14
sub c, b					; 255-b	-> c	make value positive		15
mov b, c					; a <- b								16
"manGtGhostY":				LABEL! DELETE ME!						17
mov c, a					; a->c (c is now x distance)			17
add a, b					; a<-a+b	(a is now x+y dist)			18
int8						; debug									19
hlt							; halt


******************************************************************

; follow the left wall -- untested!

int 3	; get ghost id
int 5	; ghost position in x = a, y = b
mov [200], a		; x left
mov [201], b		; y left
mov [202], a		; x front
mov [203], b		; y front
mov [204], a		; x right
mov [205], b		; y right
int 3	; get ghost id
int 6	; get ghost vitality/direction (direction is in b)
mov h, b
mov [anddir1], h
mov [anddir2], h
and [anddir1], 1
and [anddir2], 2

jeq "dirUpDown", [anddir1], 0	; direction: left/right (else case)
	mov [subtrY], 1
	div [anddir2], 2	; anddir2 = anddir2<<1
	sub [subtrY], [anddir2]
	sub [201], [subtrY]
	add [202], [subtrY]	; front tile
	add [206], [subtrY]	; right tile
	jeq "dirLeftRight", 0, 0
"dirUpDown:"	; IF case
	mov [subtrX], 1		; prepare subtraction
	sub [subtrX], [anddir1]	; subtract direction from 1 -> either 1 (up) or 255 (down)
	sub [200], [subtrX]		; subtract subtrX from x coord. if up, then -1, if down, then -255 (=+1)
	sub [203], [subtrX]		; front tile (if dir%2=0, then front subtraction = (left x subtraction))	
	add [205], [subtrX]		; right tile
"dirLeftRight" ; now move parameters to the registers so we can ask for the tile:
mov a, [200]
mov b, [201]
int 7		; map square content to the left -> a
mov [210], a	; left square
mov a, [202]
mov b, [203]
int 7		; map square content to the front -> a
mov [211], a	; front square
mov a, [204]
mov b, [205]
int 7		; map square content to the right -> a
mov [212], a	; right square

; no wall to the left
jeq	"wallToTheLeft", [210], ´WallSymbol´		(´WallSymbol´ = 0)
	// -> no wall to the left
	// if there is no wall to the left, rotate left
	add h, 1    //  rotate left
	and h, 3    //  rotate left
	mov a, h
	int 1		; new direction
	hlt			; stop
"wallToTheLeft":
jeq "wallToTheFront", [211], ´WallSymbol´
	// -> no wall to the front
	// continue moving
	hlt	; stop, do nothing
"wallToTheFront":
jeq "wallToTheRight", [212], ´WallSymbol´
	// -> no wall to the right
	add h, 3	; rotate right
	and h, 3	; rotate right
	mov a, h	; set direction register
	int 1		; new direction
	hlt			; stop
"wallToTheRight":
	// move back
	add h, 2	; rotate back
	and h, 2
	mov a, h
	int 1
	hlt