$DATA
'wall	0		; id of wall is 0

$VAR
.stack	255
.ghost-x	200
.ghost-y	201
.ghost-dir	202
; WNSE
.tile-w		0
.tile-n		1
.tile-e		2
.tile-s		3

.tile-front	203
.tile-left	204

$PGM
; get the ghost position
int 3					; get ghost index
int 5					; get current position
mov [.ghost-x], a
mov [.ghost-y], b

; now, get the ghost direction (0=up, 1=right, 2=down; 3=left)
int 3
int 6					; get ghost stats
mov [.ghost-dir], b

; now get the NWSE tiles
; north
mov a, [.ghost-x]
mov b, [.ghost-y]
dec b					; y-1
int 7					; request map tile at (x, y-1)
mov [.tile-n], a
; south
mov a, [.ghost-x]
add b, 2				; y-1 is already in b, so add 2 to make it y+1
int 7					; request map tile at (x, y+1)
mov [.tile-s], a
; west
mov a, [.ghost-x]
mov b, [.ghost-y]
dec a					; x-1
int 7					; request map tile at (x-1, y)
mov [.tile-w], a
; east
mov a, [.ghost-x]
mov b, [.ghost-y]
inc a					; x+1
int 7					; request map tile at (x+1, y)
mov [.tile-e], a

; now, decide on what the left tile is
; if direction is 0, then left is W			
; if direction is 1, then left is N
; if direction is 2, then left is E
; if direction is 3, then left is S

; ...and the front tile
; if direction is 0, then front is N		
; if direction is 1, then front is E		
; if direction is 2, then front is S		
; if direction is 3, then front is W		

; 		l		f      f = (l-1) & 3
; N		1		0
; W		0		3
; S		3		2
; E		2		1
; put W in [0], N in [1], etc.

; use h as a scratch register
"test-tiles":
mov h, [.ghost-dir]		; load direction in h
mov [.tile-left], [h]	; load content of left tile into tile-left
dec h					; get front tile: decrement h
and h, 3				; and and it with 3
mov [.tile-front], [h]	; load content of front tile into tile-front

; now decide on what to do
; if the left tile is not a wall, then go left
jgt "go-left", [.tile-left], 'wall
	; left tile is a wall. is the front tile a wall?
	jeq "rotate-right-and-try-again", [.tile-front], 'wall
		; the left tile is a wall and the front tile is not a wall, 
		; so continue your current direction
		hlt;

	"rotate-right-and-try-again":
	add [.ghost-dir], 1		; increment direction
	and [.ghost-dir], 3		; direction has to be <= 3
	mov a, [.ghost-dir]
	int 1					; update direction
	jmp "test-tiles"		; try again

"go-left":	; go left
mov a, 3
int 1					; go left
hlt						; halt






















Assembled version:



int 3 			; get ghost index 
int 5 			; get current position 
mov [200], a 
mov [201], b 
int 3 
int 6 			; get ghost stats 
mov [202], b 
mov a, [200] 
mov b, [201] 
dec b 			; y-1 
int 7 			; request map tile at (x, y-1) 
mov [1], a 
mov a, [200] 
add b, 2 			; y-1 is already in b, so add 2 to make it y+1 
int 7 			; request map tile at (x, y+1) 
mov [3], a 
mov a, [200] 
mov b, [201] 
dec a 			; x-1 
int 7 			; request map tile at (x-1, y) 
mov [0], a 
mov a, [200] 
mov b, [201] 
inc a 			; x+1 
int 7 			; request map tile at (x+1, y) 
mov [2], a 
mov h, [202] 			; load direction in h 
mov [204], [h] 			; load content of left tile into tile-left 
dec h 			; get front tile: decrement h 
and h, 3 			; and and it with 3 
mov [203], [h] 			; load content of front tile into tile-front 
jgt 39, [204], 0 
jeq 34, [203], 0 
hlt			; 
add [202], 1 			; increment direction 
and [202], 3 			; direction has to be <= 3 
mov a, [202] 
int 1 			; update direction 
mov pc, 26 			; emulated jmp 
mov a, 3 
int 1 			; go left 
hlt 			; halt 
