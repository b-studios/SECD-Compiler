$DATA
'wall	0		; id of wall is 0

$VAR
.stack	255
.ghost-x	200
.ghost-y	201
.ghost-dir	202
; WNSE
.tile-w		3
.tile-n		0
.tile-e		1
.tile-s		2

.tile-front	203
.tile-left	204

$PGM
; get the ghost position
get-ghost-id					; get ghost index
get-ghost-coords					; get current position
mov [.ghost-x], a
mov [.ghost-y], b
;int 8					; debug print ghost position

; now, get the ghost direction (0=up, 1=right, 2=down; 3=left)
get-ghost-id
get-ghost-status					; get ghost stats
mov [.ghost-dir], b
;int 8 					; debug print ghost direction

; now get the NWSE tiles
; north
mov a, [.ghost-x]
mov b, [.ghost-y]
dec b					; y-1
get-map					; request map tile at (x, y-1)
mov [.tile-n], a
; south
mov a, [.ghost-x]
add b, 2				; y-1 is already in b, so add 2 to make it y+1
get-map					; request map tile at (x, y+1)
mov [.tile-s], a
; west
mov a, [.ghost-x]
mov b, [.ghost-y]
dec a					; x-1
get-map					; request map tile at (x-1, y)
mov [.tile-w], a
; east
mov a, [.ghost-x]
mov b, [.ghost-y]
inc a					; x+1
get-map					; request map tile at (x+1, y)
mov [.tile-e], a

; dbg [.tile-n]
; dbg [.tile-w]
; dbg [.tile-s]
; dbg [.tile-e]

; now, decide on what the left tile is
; if direction is 0, then left is W		up	
; if direction is 1, then left is N		right
; if direction is 2, then left is E		down	
; if direction is 3, then left is S		left

; ...and the front tile
; if direction is 0, then front is N		up
; if direction is 1, then front is E		right
; if direction is 2, then front is S		down
; if direction is 3, then front is W		left

; 		l		f     L = (f - 1 ) & 3
; N		1		0
; W		0		3
; S		3		2
; E		2		1
; put W in [3], N in [0], etc.

; use h as a scratch register
"test-tiles":
mov h, [.ghost-dir]		; load direction in h
; int 8
mov [.tile-front], [h]	; load content of left tile into tile-left
dec h					; get front tile: decrement h
and h, 3				; and and it with 3
mov [.tile-left], [h]	; load content of front tile into tile-front
; dbg [.tile-left]
; dbg [.tile-front]

; now decide on what to do
; if the left tile is not a wall, then go left
jgt "rotate-left-and-go-there", [.tile-left], 'wall		; the tile on the left is not a wall -> rotate left and go there
	; left tile is a wall. is the front tile a wall?
	jeq "rotate-right-and-try-again", [.tile-front], 'wall
	
	"continue-walking-in-the-same-direction":
	; the left tile is a wall and the front tile is not a wall, 
	; so continue your current direction
	; int 8			; left is wall and front not wall->continue
	hlt				; halt

	"rotate-right-and-try-again":
	; int 8					; rotate right and try again
	add [.ghost-dir], 1		; increment direction
	and [.ghost-dir], 3		; direction has to be <= 3
	mov a, [.ghost-dir]
	set-direction					; update direction
	jmp "test-tiles"		; try again

"rotate-left-and-go-there":	; go left
; int 8					; go left
mov a, [.ghost-dir]		
add a, 3				; rotate left
and a, 3				; rotate left, dir has to be <= 3
set-direction					; go left
; int 8
hlt						; halt













































assembled:

int 3 			; get ghost id 
int 5 			; get ghost coords 
mov [200], a 
mov [201], b 
int 3 			; get ghost id 
int 6 			; get ghost status 
mov [202], b 
mov a, [200] 
mov b, [201] 
dec b 			; y-1 
int 7 			; get map 
mov [0], a 
mov a, [200] 
add b, 2 			; y-1 is already in b, so add 2 to make it y+1 
int 7 			; get map 
mov [2], a 
mov a, [200] 
mov b, [201] 
dec a 			; x-1 
int 7 			; get map 
mov [3], a 
mov a, [200] 
mov b, [201] 
inc a 			; x+1 
int 7 			; get map 
mov [1], a 
mov h, [202] 			; load direction in h 
mov [203], [h] 			; load content of left tile into tile-left 
dec h 			; get front tile: decrement h 
and h, 3 			; and and it with 3 
mov [204], [h] 			; load content of front tile into tile-front 
jgt 39, [204], 0 			; the tile on the left is not a wall -> rotate left and go there 
jeq 34, [203], 0 
hlt 			; halt 
add [202], 1 			; increment direction 
and [202], 3 			; direction has to be <= 3 
mov a, [202] 
int 0 			; set direction 
mov pc, 26 			; emulated jmp 
mov a, [202] 
add a, 3 			; rotate left 
and a, 3 			; rotate left, dir has to be <= 3 
int 0 			; set direction 
hlt 			; halt 
